/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/triangletodd/gort/pkg/apis/gorturl/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GortURLLister helps list GortURLs.
type GortURLLister interface {
	// List lists all GortURLs in the indexer.
	List(selector labels.Selector) (ret []*v1.GortURL, err error)
	// GortURLs returns an object that can list and get GortURLs.
	GortURLs(namespace string) GortURLNamespaceLister
	GortURLListerExpansion
}

// gortURLLister implements the GortURLLister interface.
type gortURLLister struct {
	indexer cache.Indexer
}

// NewGortURLLister returns a new GortURLLister.
func NewGortURLLister(indexer cache.Indexer) GortURLLister {
	return &gortURLLister{indexer: indexer}
}

// List lists all GortURLs in the indexer.
func (s *gortURLLister) List(selector labels.Selector) (ret []*v1.GortURL, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GortURL))
	})
	return ret, err
}

// GortURLs returns an object that can list and get GortURLs.
func (s *gortURLLister) GortURLs(namespace string) GortURLNamespaceLister {
	return gortURLNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GortURLNamespaceLister helps list and get GortURLs.
type GortURLNamespaceLister interface {
	// List lists all GortURLs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.GortURL, err error)
	// Get retrieves the GortURL from the indexer for a given namespace and name.
	Get(name string) (*v1.GortURL, error)
	GortURLNamespaceListerExpansion
}

// gortURLNamespaceLister implements the GortURLNamespaceLister
// interface.
type gortURLNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GortURLs in the indexer for a given namespace.
func (s gortURLNamespaceLister) List(selector labels.Selector) (ret []*v1.GortURL, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GortURL))
	})
	return ret, err
}

// Get retrieves the GortURL from the indexer for a given namespace and name.
func (s gortURLNamespaceLister) Get(name string) (*v1.GortURL, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("gorturl"), name)
	}
	return obj.(*v1.GortURL), nil
}
